FWaveD                 package:waved                 R Documentation

_F_W_a_v_e_D

_D_e_s_c_r_i_p_t_i_o_n:

     Computes the Forward WaveD Transform.

_U_s_a_g_e:

     FWaveD(y, g = 1, L = 3, deg = 3, F = (log2(length(y)) - 1), thr = rep(0, log2(length(y))), SOFT = FALSE)

_A_r_g_u_m_e_n_t_s:

       y: Sample of $f*g$ + (Gaussian noise), a vector of dyadic length
           (i.e. $2^(J-1)$ where J is the largest resolution level). 
          Here f is the target function, g is the convolution kernel.

       g: Sample of g or g + (Gaussian noise), same length as yobs. The
          default is the Dirac mass at 0.

       L: Lowest resolution level; the default is 3.

     deg: The degree of the Meyer wavelet, either 1, 2, or 3 (the
          default).

       F: Finest resolution level; the default is the data-driven
          choice j1 (see Value below).

     thr: A vector of length $F-L+1$, giving thresholds at each
          resolution levels L,L+1,...,F; default is maxiset threshold.

    SOFT: if SOFT=TRUE, uses the soft thresholding policy as opposed to
          the hard (SOFT=FALSE, the default).

_V_a_l_u_e:

     Returns a vector of wavelet coefficients of length n (the same
     length as y), the last n/2 entries are wavelet coefficients at
     resolution level $J-1$, where $J = log_2(n)$; the $n/4$ entries
     before that are the wavelet coefficients at resolution level
     $J-2$, and so on until level L. In addition the $2^L$ entries are
     scaling coefficients at coarse level C=L.

_R_e_f_e_r_e_n_c_e_s:

     Johnstone, I., Kerkyacharian, G., Picard, D. and Raimondo, M. 
     (2004),  `Wavelet deconvolution in a periodic setting', {\em
     Journal of the Royal Statistical Society, Series B} {\bf
     66}(3),~547-573.  with discussion pp.627-652.

     Raimondo, M. and Stewart, M. (2006), `The WaveD Transform in R',
     preprint, School and Mathematics and Statistics, University of
     Sydney.

_S_e_e _A_l_s_o:

     'WaveD'

_E_x_a_m_p_l_e_s:

     library(waved)
     data=waved.example(TRUE,FALSE)
     lidar.w=FWaveD(data$lidar.blur,data$g)

